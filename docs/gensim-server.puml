@startuml

'skinparam monochrome true
skinparam classBackgroundColor White
skinparam classArrowColor Black
skinparam classBorderColor Black
skinparam stereotypeCBackgroundColor Gray
'hide members
hide circle

class SimIndex <gensim.utils.SaveLoad> {
    -fname : string
    -shardsize : int
    -topsims = int
    -id2pos : dict
    -pos2id : dict
    -id2sims : SqliteDict
    -qindex : gensim.similarities.Similarity
    -length : int
    --
    +__init__ (fname, num_features, 
        \t shardsize=SHARD_SIZE, topsims=TOP_SIMS)
    --
    +{static}load (fname) : SimIndex
    +save (fname)
    +close ()
    +terminate ()
    ..
    +keys ()
    +index_documents (fresh_docs, model)
    +delete (docids)
    +vec_by_id (docid)
    +sims_by_id (docid)
    +sims_by_vec (vec, normalize=None)
    +merge (other)
    ~sims2scores (sims, eps=1e-7)
    --
    #__str__ ()
    #__len__ ()
    #__contains__ (docid)
    --
    -check_moved ()
    -update_ids (docids)
    -update_mappings ()
}

class SimModel <gensim.utils.SaveLoad> {
    -dictionary : gensim.corpora.Dictionary
    --
    +__init__ (fresh_docs, dictionary=None, 
        \t method=None, params=None)
    --
    ~doc2vec (doc)
    ~docs2vecs (docs)
    ~get_tfidf (doc)
    ~close ()
    #__str__ ()

'class IterableCorpus {
'    #__iter__ ()
'    #__len__ ()
'}
}

class Dictionary as "gensim.corpora.Dictionary" <gensim.utils.SaveLoad> {
    +__init__(documents=None, prune_at=2000000):
    --
    +iteritems():
    +itervalues():
    +keys():
    +from_documents(documents):
    +add_documents(documents, prune_at=2000000):
    +doc2bow(document, allow_update=False, 
        \t return_missing=False):
    +filter_extremes(no_below=5, no_above=0.5, 
        \t keep_n=100000):
    +filter_n_most_frequent(remove_n):
    +filter_tokens(bad_ids=None, good_ids=None):
    +compactify():
    +save_as_text(fname, sort_by_word=True):
    +merge_with(other):
    +load_from_text(fname):
    +from_corpus(corpus, id2word=None):
    --
    #__len__():
    #__str__():
    #__iter__():
    #__getitem__(tokenid):
}

SimModel -r-> Dictionary

class SimServer {
    -model : SimModel
    -fresh_index : SimIndex
    -opt_index : SimIndex
    -payload : SqliteDict
    -fresh_docs : SqliteDict
    --
    +__init__ (basename, use_locks=False)
    --
    +train (corpus=None, method='auto', 
        \t clear_buffer=True, params=None)
    +index (corpus=None, clear_buffer=True)
    +find_similar (doc, min_score=0.0, 
        \t max_results=100)
    ..
    +keys ()
    +status ()
    +optimize ()
    +drop_index (keep_model=True)
    +delete (docids)
    +vec_by_id (docid)
    +get_tfidf (*args, **kwargs)
    +memdebug ()
    +close ()
    --
    #__str__ ()
    #__len__ ()
    #__del__ ()
    #__contains__ (docid)
    --
    -is_locked ()
    -location (name)
    -buffer (documents)
    -flush (save_index=False, save_model=False, 
        \t clear_buffer=False)
}

class SessionServer <gensim.utils.SaveLoad> {
    -stable : SimServer
    +loc_stable
    +loc_session
    --
    +__init__ (basedir, autosession=True, 
        \t use_locks=True)
    --
    +train (*args, **kwargs)
    +index (*args, **kwargs)
    +find_similar (*args, **kwargs)
    ..
    +keys ()
    +status ()
    +optimize ()
    +drop_index (keep_model=True)
    +delete (docids)
    +write_istable ()
    +get_tfidf (*args, **kwargs)
    +debug_model ()
    ..
    +commit ()
    +rollback ()
    +close ()
    +terminate ()
    +set_autosession (value=None)
    ..
    ~check_session ()
    ~open_session ()
    --
    #__str__ ()
    #__len__ ()
    #__del__ ()
    #__contains__ (docid)
    --
    -location (name)
    -buffer (*args, **kwargs)
}

SessionServer -r-> SimServer
SimServer -r-> SimIndex
SimServer -d-> SimModel

'SimIndex -u-|> gensim.utils.SaveLoad
'SimModel -r-|> gensim.utils.SaveLoad
'SessionServer -u-|> gensim.utils.SaveLoad

@enduml